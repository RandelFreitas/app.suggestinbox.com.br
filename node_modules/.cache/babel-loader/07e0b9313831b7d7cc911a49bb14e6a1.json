{"ast":null,"code":"var _jsxFileName = \"D:\\\\Randel\\\\PROJETO 2020\\\\SuggestInBox\\\\app.suggestinbox.com.br\\\\src\\\\pages\\\\User\\\\Suggest\\\\Menu\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { atvCompany, getCompanyById } from '../../../../store/companyReducer';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Switch from \"@material-ui/core/Switch\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nconst useStyles = makeStyles(() => ({\n  button: {\n    marginTop: '25px'\n  },\n  formControl: {\n    padding: '15px 0'\n  },\n  buttonAtv: {\n    margin: '15px 0'\n  },\n  section: {\n    border: '1px solid black',\n    background: 'red'\n  },\n  item: {\n    border: '1px solid black',\n    background: 'green'\n  }\n}));\n\nconst Menu = props => {\n  const classes = useStyles();\n  const {\n    companyById\n  } = props;\n  const [menu, setMenu] = useState({\n    check: companyById.menu\n  });\n  useEffect(() => {\n    setMenu({\n      check: companyById.menu\n    });\n  }, [companyById.menu]);\n\n  const atvMenu = companyById => {\n    if (companyById.menu) {\n      companyById.menu = false;\n      setMenu({\n        check: companyById.menu\n      });\n      return props.atvCompany(companyById);\n    } else {\n      companyById.menu = true;\n      setMenu({\n        check: companyById.menu\n      });\n      return props.atvCompany(companyById);\n    }\n  };\n\n  const [menuType, setMenuType] = useState(1);\n\n  const handleChange = event => {\n    setMenuType(event.target.value);\n  };\n\n  const initial = [{\n    id: 'id-1',\n    content: 'Quote 1'\n  }, {\n    id: 'id-2',\n    content: 'Quote 2'\n  }, {\n    id: 'id-3',\n    content: 'Quote 3'\n  }, {\n    id: 'id-4',\n    content: 'Quote 4'\n  }];\n  const grid = 8;\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  function Quote({\n    quote,\n    index\n  }) {\n    return /*#__PURE__*/React.createElement(Draggable, {\n      draggableId: quote.id,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, provided => /*#__PURE__*/React.createElement(QuoteItem, Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }), quote.content));\n  }\n\n  const QuoteList = React.memo(function QuoteList({\n    quotes\n  }) {\n    return quotes.map((quote, index) => /*#__PURE__*/React.createElement(Quote, {\n      quote: quote,\n      index: index,\n      key: quote.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }));\n  });\n  const [state, setState] = useState({\n    quotes: initial\n  });\n\n  function onDragEnd(result) {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    const quotes = reorder(state.quotes, result.source.index, result.destination.index);\n    setState({\n      quotes\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"Card\\xE1pio / Cat\\xE1logo\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.buttonAtv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Switch, {\n      checked: menu.check ? menu.check : false,\n      onClick: () => atvMenu(companyById),\n      name: \"checkedA\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }\n    }),\n    label: \"Ativar/Desativar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  })))), /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, \"Tipo:\"), /*#__PURE__*/React.createElement(Select, {\n    value: menuType,\n    onChange: handleChange,\n    displayEmpty: true,\n    className: classes.selectEmpty,\n    inputProps: {\n      'aria-label': 'Without label'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, \"Card\\xE1pio\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, \"Cat\\xE1logo\"))), /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, provided => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(QuoteList, {\n    quotes: state.quotes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 15\n    }\n  }), provided.placeholder))));\n};\n\nMenu.prototypes = {\n  companyById: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  companyById: state.company.companyById\n});\n\nconst mapsDispatchToProps = dispatch => bindActionCreators({\n  atvCompany,\n  getCompanyById\n}, dispatch);\n\nexport default connect(mapStateToProps, mapsDispatchToProps)(Menu);","map":{"version":3,"sources":["D:/Randel/PROJETO 2020/SuggestInBox/app.suggestinbox.com.br/src/pages/User/Suggest/Menu/index.js"],"names":["React","useState","useEffect","PropTypes","bindActionCreators","connect","atvCompany","getCompanyById","makeStyles","Switch","FormGroup","FormControlLabel","Typography","Grid","MenuItem","FormHelperText","FormControl","Select","DragDropContext","Droppable","Draggable","useStyles","button","marginTop","formControl","padding","buttonAtv","margin","section","border","background","item","Menu","props","classes","companyById","menu","setMenu","check","atvMenu","menuType","setMenuType","handleChange","event","target","value","initial","id","content","grid","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","Quote","quote","index","provided","innerRef","draggableProps","dragHandleProps","QuoteList","memo","quotes","map","state","setState","onDragEnd","destination","source","selectEmpty","droppableProps","placeholder","prototypes","array","isRequired","mapStateToProps","company","mapsDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { atvCompany, getCompanyById } from '../../../../store/companyReducer';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst useStyles = makeStyles(() =>({\r\n  button: {\r\n    marginTop: '25px',\r\n  },\r\n  formControl: {\r\n    padding: '15px 0'\r\n  },\r\n  buttonAtv: {\r\n    margin: '15px 0'\r\n  }, \r\n  section: {\r\n    border: '1px solid black',\r\n    background: 'red',\r\n  },\r\n  item: {\r\n    border: '1px solid black',\r\n    background: 'green',\r\n  }\r\n}));\r\n\r\nconst Menu = (props) => {\r\n  const classes = useStyles();\r\n  const { companyById } = props;\r\n  const [ menu, setMenu ] = useState({\r\n    check: companyById.menu\r\n  });\r\n\r\n  useEffect(() => {\r\n    setMenu({check: companyById.menu});\r\n  },[companyById.menu])\r\n\r\n  const atvMenu = (companyById) => {\r\n    if(companyById.menu){\r\n      companyById.menu = false;\r\n      setMenu({check: companyById.menu});\r\n      return props.atvCompany(companyById);\r\n    }else{\r\n      companyById.menu = true;\r\n      setMenu({check: companyById.menu});\r\n      return props.atvCompany(companyById);\r\n    }\r\n  }\r\n\r\n  const [menuType, setMenuType] = useState(1);\r\n\r\n  const handleChange = (event) => {\r\n    setMenuType(event.target.value);\r\n  };\r\n\r\n  const initial = [\r\n    {\r\n      id : 'id-1',\r\n      content: 'Quote 1'\r\n    },\r\n    {\r\n      id : 'id-2',\r\n      content: 'Quote 2'\r\n    },\r\n    {\r\n      id : 'id-3',\r\n      content: 'Quote 3'\r\n    },\r\n    {\r\n      id : 'id-4',\r\n      content: 'Quote 4'\r\n    },\r\n  ];\r\n\r\n  const grid = 8;\r\n  const reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n  };  \r\n\r\n  function Quote({ quote, index }) {\r\n    return (\r\n      <Draggable draggableId={quote.id} index={index}>\r\n        {provided => (\r\n          <QuoteItem\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n          >\r\n            {quote.content}\r\n          </QuoteItem>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  }\r\n\r\n  const QuoteList = React.memo(function QuoteList({ quotes }) {\r\n    return quotes.map((quote: QuoteType, index: number) => (\r\n      <Quote quote={quote} index={index} key={quote.id} />\r\n    ));\r\n  });\r\n\r\n  const [state, setState] = useState({ quotes: initial });\r\n  function onDragEnd(result) {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n    if (result.destination.index === result.source.index) {\r\n      return;\r\n    }\r\n    const quotes = reorder(\r\n      state.quotes,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n    setState({ quotes });\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <Typography variant=\"h5\" component=\"h2\">Cardápio / Catálogo</Typography>\r\n      <Grid container>\r\n        <Grid item className={classes.buttonAtv}>\r\n          <FormGroup row>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={menu.check? menu.check : false}\r\n                onClick={()=>atvMenu(companyById)}\r\n                name=\"checkedA\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Ativar/Desativar\"\r\n          />\r\n          </FormGroup>\r\n        </Grid>\r\n      </Grid>\r\n      <FormControl className={classes.formControl}>\r\n        <FormHelperText>Tipo:</FormHelperText>\r\n        <Select\r\n          value={menuType}\r\n          onChange={handleChange}\r\n          displayEmpty\r\n          className={classes.selectEmpty}\r\n          inputProps={{ 'aria-label': 'Without label' }}\r\n        >\r\n          <MenuItem value={1}>Cardápio</MenuItem>\r\n          <MenuItem value={2}>Catálogo</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"list\">\r\n          {provided => (\r\n            <div ref={provided.innerRef} {...provided.droppableProps}>\r\n              <QuoteList quotes={state.quotes} />\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n}\r\n\r\nMenu.prototypes = {\r\n  companyById: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  companyById: state.company.companyById,\r\n});\r\n\r\nconst mapsDispatchToProps = dispatch => \r\n  bindActionCreators({atvCompany, getCompanyById}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapsDispatchToProps)(Menu);"]},"metadata":{},"sourceType":"module"}