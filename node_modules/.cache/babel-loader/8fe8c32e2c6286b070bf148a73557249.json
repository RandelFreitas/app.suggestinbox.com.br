{"ast":null,"code":"var _jsxFileName = \"D:\\\\Randel\\\\PROJETO 2020\\\\SuggestInBox\\\\SuggestInBoxFront\\\\src\\\\pages\\\\Client\\\\FormClient\\\\index.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { submitSuggest } from '../../../store/clientReducer';\nimport { connect } from 'react-redux';\nimport NumberFormat from 'react-number-format';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Rating from '@material-ui/lab/Rating';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport Star from '@material-ui/icons/Star';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\n\nconst NumberFormatCustom = props => {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    isNumericString: true,\n    format: \"(##) #########\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }));\n};\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nconst FormClient = () => {\n  const classes = useStyles();\n  const [checked, setChecked] = useState(false);\n  const [values, setValues] = useState({\n    name: '',\n    phone: '',\n    stars: ''\n  });\n\n  const handleChange = event => {\n    setValues({ ...values,\n      [event.target.name]: event.target.value\n    });\n    console.log(values);\n  };\n\n  const checkChange = event => {\n    setValues({\n      name: '',\n      phone: ''\n    });\n    setChecked(event.target.checked);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Nome\",\n    disabled: checked,\n    value: values.name,\n    onChange: handleChange,\n    name: \"name\",\n    id: \"standard-basic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Telefone\",\n    disabled: checked,\n    value: values.phone,\n    onChange: handleChange,\n    name: \"phone\",\n    id: \"formatted-numberformat-input\",\n    InputProps: {\n      inputComponent: NumberFormatCustom\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    label: \"Desejo n\\xE3o me identificar\",\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      checked: values.checkedA,\n      onChange: checkChange,\n      name: \"checkedA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 20\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    component: \"fieldset\",\n    mb: 3,\n    borderColor: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"Toque para classificar\"), /*#__PURE__*/React.createElement(Rating, {\n    name: \"stars\",\n    onChange: handleChange,\n    defaultValue: 0,\n    icon: /*#__PURE__*/React.createElement(Star, {\n      fontSize: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }),\n    emptyIcon: /*#__PURE__*/React.createElement(StarBorderIcon, {\n      fontSize: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 24\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }))));\n};\n\nFormClient.prototypes = {\n  infos: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  infos: state.client.infos\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  submitSuggest\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormClient);","map":{"version":3,"sources":["D:/Randel/PROJETO 2020/SuggestInBox/SuggestInBoxFront/src/pages/Client/FormClient/index.js"],"names":["React","useState","PropTypes","bindActionCreators","submitSuggest","connect","NumberFormat","makeStyles","TextField","FormControlLabel","FormControl","Checkbox","Rating","Box","Typography","CssBaseline","StarBorderIcon","Star","useStyles","theme","root","margin","spacing","NumberFormatCustom","props","inputRef","onChange","other","values","target","name","value","propTypes","func","isRequired","string","FormClient","classes","checked","setChecked","setValues","phone","stars","handleChange","event","console","log","checkChange","center","inputComponent","checkedA","prototypes","infos","array","mapStateToProps","state","client","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { bindActionCreators } from 'redux';\r\nimport { submitSuggest } from '../../../store/clientReducer'\r\nimport { connect } from 'react-redux';\r\nimport NumberFormat from 'react-number-format';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport Star from '@material-ui/icons/Star';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nconst NumberFormatCustom = (props) => {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      isNumericString\r\n      format='(##) #########'\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst FormClient = () => {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = useState(false);\r\n  const [values, setValues] = useState({\r\n    name: '',\r\n    phone: '',\r\n    stars: ''\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    setValues({...values, [event.target.name]: event.target.value });\r\n    console.log(values);\r\n  };\r\n  const checkChange = (event) => {\r\n    setValues({name: '', phone: ''});\r\n    setChecked(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormControl className={classes.center}>\r\n        <TextField \r\n          label=\"Nome\"\r\n          disabled={checked}\r\n          value={values.name} \r\n          onChange={handleChange}\r\n          name=\"name\"\r\n          id=\"standard-basic\" \r\n        />\r\n        <TextField\r\n          label=\"Telefone\"\r\n          disabled={checked}\r\n          value={values.phone}\r\n          onChange={handleChange}\r\n          name=\"phone\"\r\n          id=\"formatted-numberformat-input\"\r\n          InputProps={{inputComponent: NumberFormatCustom}}\r\n        />\r\n        <FormControlLabel\r\n          label=\"Desejo não me identificar\"\r\n          control={<Checkbox checked={values.checkedA} \r\n          onChange={checkChange} \r\n          name=\"checkedA\" />}\r\n        />\r\n        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n          <Typography component=\"legend\">Toque para classificar</Typography>\r\n          <Rating\r\n            name=\"stars\"\r\n            onChange={handleChange}\r\n            defaultValue={0}\r\n            icon={<Star fontSize=\"large\" />}\r\n            emptyIcon={<StarBorderIcon fontSize=\"large\" />}\r\n          />\r\n        </Box>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nFormClient.prototypes = {\r\n  infos: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  infos: state.client.infos\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({submitSuggest}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormClient);"]},"metadata":{},"sourceType":"module"}