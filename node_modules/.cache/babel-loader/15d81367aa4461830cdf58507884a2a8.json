{"ast":null,"code":"import api from '../services/api';\nimport history from '../services/history';\nimport { showMessage } from './messageReducer';\nconst ACTIONS = {\n  LIST_USERS: 'LISTUSERS',\n  BY_ID_USER: 'BYIDUSER',\n  UPDATE_USER: 'UPDATEUSER'\n};\nconst INITIAL_STATE = {\n  users: [],\n  userById: [],\n  infosUsers: []\n};\nexport const userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.BY_ID_USER:\n      return { ...state,\n        userById: action.userById\n      };\n\n    case ACTIONS.UPDATE_USER:\n      return { ...state,\n        userById: action.userById\n      };\n\n    default:\n      return state;\n  }\n}; //LISTAR TODOS USUÁRIOS\n\nexport const listUser = (page, nOfItems) => {\n  return dispatch => {\n    api.get(`/adm/user?page=${page}&limit=${nOfItems}`).then(Response => {\n      const {\n        docs,\n        infos\n      } = Response.data;\n      dispatch({\n        type: ACTIONS.LIST_USERS,\n        users: docs,\n        infosUsers: infos\n      });\n\n      if (Response.data.error) {\n        dispatch(showMessage(Response.data.error));\n      }\n    }).catch(error => {\n      dispatch(showMessage(\"Servidor indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n}; //GET BY ID USER\n\nexport const getUserById = id => {\n  return dispatch => {\n    api.get(`/adm/user/${id}`).then(Response => {\n      dispatch({\n        type: ACTIONS.BY_ID_USER,\n        userById: Response.data\n      });\n\n      if (Response.data.error) {\n        dispatch(showMessage(Response.data.error));\n      }\n    }).catch(error => {\n      dispatch(showMessage(\"Servidor indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n}; //UPDATE USER\n\nexport const updateUser = (user, idUser) => {\n  return dispatch => {\n    api.put(`/adm/user/${idUser}`, user).then(Response => {\n      dispatch({\n        type: ACTIONS.UPDATE_USER,\n        userById: Response.data\n      });\n\n      if (Response.data.error) {\n        dispatch(showMessage(Response.data.error));\n      } else {\n        dispatch(showMessage(\"Usuário atualizado com sucesso!\"), history.push(`/user/?${idUser}?page=1&limit=25`));\n      }\n    }).catch(error => {\n      dispatch(showMessage(\"Servidor indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n};","map":{"version":3,"sources":["D:/Randel/PROJETO 2020/SuggestInBox/app.suggestinbox.com.br/src/store/userReducer.js"],"names":["api","history","showMessage","ACTIONS","LIST_USERS","BY_ID_USER","UPDATE_USER","INITIAL_STATE","users","userById","infosUsers","userReducer","state","action","type","listUser","page","nOfItems","dispatch","get","then","Response","docs","infos","data","error","catch","console","log","getUserById","id","updateUser","user","idUser","put","push"],"mappings":"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","sourcesContent":["import api from '../services/api';\r\nimport history from '../services/history';\r\nimport { showMessage } from './messageReducer';\r\n\r\nconst ACTIONS = {\r\n  LIST_USERS: 'LISTUSERS',\r\n  BY_ID_USER: 'BYIDUSER',\r\n  UPDATE_USER: 'UPDATEUSER',\r\n}\r\nconst INITIAL_STATE = {\r\n  users: [],\r\n  userById: [],\r\n  infosUsers: [],\r\n}\r\nexport const userReducer = (state = INITIAL_STATE, action) => {\r\n  switch(action.type){\r\n    case ACTIONS.BY_ID_USER:\r\n      return {...state, userById: action.userById}\r\n    case ACTIONS.UPDATE_USER:\r\n      return {...state, userById: action.userById}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n//LISTAR TODOS USUÁRIOS\r\nexport const listUser = (page, nOfItems) => {\r\n  return dispatch => {\r\n    api.get(`/adm/user?page=${page}&limit=${nOfItems}`)\r\n    .then(Response => {\r\n      const { docs, infos } = Response.data;\r\n      dispatch({\r\n        type: ACTIONS.LIST_USERS,\r\n        users: docs,\r\n        infosUsers: infos,\r\n      });\r\n      if(Response.data.error){\r\n        dispatch(\r\n          showMessage(Response.data.error)\r\n        )\r\n      }\r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Servidor indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    );\r\n  }\r\n}\r\n//GET BY ID USER\r\nexport const getUserById = (id) => {\r\n  return dispatch => {\r\n    api.get(`/adm/user/${id}`)\r\n    .then(Response => {\r\n      dispatch({\r\n        type: ACTIONS.BY_ID_USER,\r\n        userById: Response.data,\r\n      });\r\n      if(Response.data.error){\r\n        dispatch(\r\n          showMessage(Response.data.error)\r\n        )\r\n      }\r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Servidor indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    );\r\n  }\r\n}\r\n//UPDATE USER\r\nexport const updateUser = (user, idUser) => {\r\n  return dispatch => {\r\n    api.put(`/adm/user/${idUser}`, user)\r\n    .then(Response => {\r\n      dispatch({\r\n        type: ACTIONS.UPDATE_USER,\r\n        userById: Response.data\r\n      });\r\n      if(Response.data.error){\r\n        dispatch(\r\n          showMessage(Response.data.error)\r\n        )\r\n      }else{\r\n        dispatch(\r\n          showMessage(\"Usuário atualizado com sucesso!\"),\r\n          history.push(`/user/?${idUser}?page=1&limit=25`)\r\n        )\r\n      }\r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Servidor indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}