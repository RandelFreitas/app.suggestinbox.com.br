{"ast":null,"code":"import api from '../services/api';\nimport { getCompanyById } from './companyReducer';\nimport { showMessage } from './messageReducer';\nconst ACTIONS = {\n  LIST_SUGGESTS: 'LISTSUGGESTS',\n  FAVORITE: 'FAVORITE',\n  OUT_LINE: 'OUT_LINE'\n};\nconst INITIAL_STATE = {\n  suggests: [],\n  suggestById: [],\n  infosSuggests: []\n};\nexport const suggestReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    //*********************SUGGESTS*********************\n    case ACTIONS.LIST_SUGGESTS:\n      return { ...state,\n        suggests: action.suggests,\n        infosSuggests: action.infosSuggests\n      };\n\n    case ACTIONS.FAVORITE:\n      const listUp = [...state.suggests];\n      listUp.forEach(suggest => {\n        if (suggest._id === action._id) {\n          suggest.favorite = true;\n        }\n      });\n      return { ...state,\n        suggests: listUp\n      };\n\n    case ACTIONS.OUT_LINE:\n      const id = action.id;\n      const suggests = state.suggest.filter(suggest => suggest._id !== id);\n      return { ...state,\n        suggests: suggests\n      };\n\n    default:\n      return state;\n  }\n}; //*******************************************SUGGESTS*********************************************\n//LISTAR SUGGESTS\n\nexport const listSuggest = (idUrl, page, limit, type, fromDate, toDate) => {\n  return dispatch => {\n    api.get(`/adm/all-suggest/${idUrl}?page=${page}&limit=${limit}&type=${type}&fromDate=${fromDate}&toDate=${toDate}`).then(Response => {\n      const {\n        docs,\n        infos\n      } = Response.data;\n      dispatch({\n        type: ACTIONS.LIST_SUGGESTS,\n        suggests: docs,\n        infosSuggests: infos\n      });\n    }).catch(error => {\n      dispatch(showMessage(\"Servidor indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n}; //FAVORITAR SUGGEST\n\nexport const favorite = suggest => {\n  return dispatch => {\n    api.put(`/adm/favorite-suggest/${suggest._id}`, suggest).then(Response => {\n      dispatch({\n        type: ACTIONS.FAVORITE,\n        id: suggest._id\n      });\n    }).catch(error => {\n      dispatch(showMessage(\"Servidor indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n}; //ARQUIVAR SUGGEST\n\nexport const outlier = suggest => {\n  return dispatch => {\n    api.put(`/adm/outlier-suggest/${suggest._id}`, suggest).then(Response => {\n      dispatch(getCompanyById(suggest.companyId), {\n        type: ACTIONS.OUT_LINE,\n        id: suggest._id\n      });\n    }).catch(error => {\n      dispatch(showMessage(\"Servidor indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n};","map":{"version":3,"sources":["D:/Randel/PROJETO 2020/SuggestInBox/app.suggestinbox.com.br/src/store/suggestReducer.js"],"names":["api","getCompanyById","showMessage","ACTIONS","LIST_SUGGESTS","FAVORITE","OUT_LINE","INITIAL_STATE","suggests","suggestById","infosSuggests","suggestReducer","state","action","type","listUp","forEach","suggest","_id","favorite","id","filter","listSuggest","idUrl","page","limit","fromDate","toDate","dispatch","get","then","Response","docs","infos","data","catch","error","console","log","put","outlier","companyId"],"mappings":"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","sourcesContent":["import api from '../services/api';\r\nimport { getCompanyById } from './companyReducer';\r\nimport { showMessage } from './messageReducer';\r\n\r\nconst ACTIONS = {\r\n  LIST_SUGGESTS: 'LISTSUGGESTS',\r\n  FAVORITE: 'FAVORITE',\r\n  OUT_LINE: 'OUT_LINE',\r\n}\r\nconst INITIAL_STATE = {\r\n  suggests: [],\r\n  suggestById: [],\r\n  infosSuggests: [],\r\n}\r\n\r\nexport const suggestReducer = (state = INITIAL_STATE, action) => {\r\n  switch(action.type){\r\n    //*********************SUGGESTS*********************\r\n    case ACTIONS.LIST_SUGGESTS:\r\n      return {...state, suggests: action.suggests, infosSuggests: action.infosSuggests}\r\n    case ACTIONS.FAVORITE:\r\n      const listUp = [...state.suggests]\r\n      listUp.forEach(suggest => {\r\n        if(suggest._id === action._id){\r\n          suggest.favorite = true;\r\n        }\r\n      })\r\n      return {...state, suggests: listUp}\r\n    case ACTIONS.OUT_LINE:\r\n      const id = action.id;\r\n      const suggests = state.suggest.filter(suggest => suggest._id !== id) \r\n      return {...state, suggests: suggests}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n//*******************************************SUGGESTS*********************************************\r\n//LISTAR SUGGESTS\r\nexport const listSuggest = (idUrl, page, limit, type, fromDate, toDate) => {\r\n  return dispatch => {\r\n    api.get(`/adm/all-suggest/${idUrl}?page=${page}&limit=${limit}&type=${type}&fromDate=${fromDate}&toDate=${toDate}`)\r\n    .then(Response => {\r\n      const { docs, infos } = Response.data;\r\n      dispatch({\r\n        type: ACTIONS.LIST_SUGGESTS,\r\n        suggests: docs,\r\n        infosSuggests: infos,\r\n      })\r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Servidor indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    );\r\n  }\r\n}\r\n//FAVORITAR SUGGEST\r\nexport const favorite = (suggest) => {\r\n  return dispatch => {\r\n    api.put(`/adm/favorite-suggest/${suggest._id}`, suggest )\r\n    .then(Response => {\r\n      dispatch({\r\n        type: ACTIONS.FAVORITE,\r\n        id: suggest._id\r\n      }) \r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Servidor indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    );\r\n  }\r\n}\r\n//ARQUIVAR SUGGEST\r\nexport const outlier = (suggest) => {\r\n  return dispatch => {\r\n    api.put(`/adm/outlier-suggest/${suggest._id}`, suggest )\r\n    .then(Response => {\r\n      dispatch(\r\n        getCompanyById(suggest.companyId),\r\n        {\r\n          type: ACTIONS.OUT_LINE,\r\n          id: suggest._id\r\n        }\r\n      )\r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Servidor indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}