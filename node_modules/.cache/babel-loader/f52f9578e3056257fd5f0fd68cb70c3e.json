{"ast":null,"code":"import api from '../services/api';\nimport history from '../services/history';\nimport { setInfosLocalStorage, logoutUser } from '../services/auth';\nimport { showMessage } from './messageReducer';\nconst ACTIONS = {\n  AUTH: 'AUTH',\n  FOGOT: 'FOGOT'\n};\nconst INITIAL_STATE = {\n  infos: [],\n  email: [],\n  user: [],\n  progress: true\n};\nexport const authReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.AUTH:\n      return { ...state,\n        infos: action.infos\n      };\n\n    case ACTIONS.FOGOT:\n      return { ...state,\n        email: action.email\n      };\n\n    case ACTIONS.RESET:\n      return { ...state,\n        user: action.user\n      };\n\n    default:\n      return state;\n  }\n}; //AUTENTICAÇÃO\n\nexport const auth = login => {\n  return dispatch => {\n    api.post('/auth', login).then(Response => {\n      dispatch({\n        type: ACTIONS.AUTH,\n        infos: Response.data\n      });\n\n      if (!Response.data.token) {\n        dispatch(showMessage(\"Senha ou email inválidos!\"));\n      } else {\n        setInfosLocalStorage(Response.data.token, Response.data.user);\n        history.push(`/user/?${Response.data.user._id}?page=1&limit=25`);\n      }\n    }).catch(error => {\n      dispatch(showMessage(\"Servidor indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n}; //ESQUECI SENHA\n\nexport const fogot = email => {\n  return dispatch => {\n    api.post('/auth/fogot', email).then(Response => {\n      dispatch({\n        type: ACTIONS.FOGOT,\n        email: Response.data\n      }, dispatch(showMessage(\"Email enviado com sucesso!\")), history.push('/login'));\n    }).catch(error => {\n      dispatch(showMessage(\"Servidor indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n}; //RESET SENHA\n\nexport const reset = user => {\n  return dispatch => {\n    api.post('/auth/reset_password', user).then(Response => {\n      dispatch({\n        type: ACTIONS.FOGOT,\n        user: Response.data\n      });\n    }).catch(error => {\n      dispatch(showMessage(\"Serviço indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n}; //LOGOUT\n\nexport const logout = () => {\n  logoutUser();\n  history.push(`/login`);\n};","map":{"version":3,"sources":["D:/Randel/PROJETO 2020/SuggestInBox/app.suggestinbox.com.br/src/store/authReducer.js"],"names":["api","history","setInfosLocalStorage","logoutUser","showMessage","ACTIONS","AUTH","FOGOT","INITIAL_STATE","infos","email","user","progress","authReducer","state","action","type","RESET","auth","login","dispatch","post","then","Response","data","token","push","_id","catch","error","console","log","fogot","reset","logout"],"mappings":"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","sourcesContent":["import api from '../services/api';\r\nimport history from '../services/history';\r\nimport { setInfosLocalStorage, logoutUser } from '../services/auth';\r\nimport { showMessage } from './messageReducer';\r\n\r\nconst ACTIONS = {\r\n  AUTH: 'AUTH',\r\n  FOGOT: 'FOGOT'\r\n}\r\nconst INITIAL_STATE = {\r\n  infos:[],\r\n  email:[],\r\n  user:[],\r\n  progress: true\r\n}\r\nexport const authReducer = (state = INITIAL_STATE, action) => {\r\n  switch(action.type){\r\n    case ACTIONS.AUTH:\r\n      return {...state, infos: action.infos}\r\n    case ACTIONS.FOGOT:\r\n      return {...state, email: action.email}\r\n    case ACTIONS.RESET:\r\n      return {...state, user: action.user}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n//AUTENTICAÇÃO\r\nexport const auth = (login) => {\r\n  return dispatch => {\r\n    api.post('/auth', login)\r\n    .then(Response => {\r\n      dispatch({\r\n        type: ACTIONS.AUTH,\r\n        infos: Response.data,\r\n      }); \r\n      if(!Response.data.token){\r\n        dispatch(\r\n          showMessage(\"Senha ou email inválidos!\")\r\n        )\r\n      }else{\r\n        setInfosLocalStorage(Response.data.token, Response.data.user);\r\n        history.push(`/user/?${Response.data.user._id}?page=1&limit=25`);\r\n      }\r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Servidor indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    )\r\n  }\r\n}\r\n//ESQUECI SENHA\r\nexport const fogot = (email) => {\r\n  return dispatch => {\r\n    api.post('/auth/fogot', email)\r\n    .then(Response => {\r\n      dispatch({\r\n        type: ACTIONS.FOGOT,\r\n        email: Response.data,\r\n      },dispatch(\r\n          showMessage(\"Email enviado com sucesso!\")\r\n        ), \r\n        history.push('/login'));\r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Servidor indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    );\r\n  }\r\n}\r\n//RESET SENHA\r\nexport const reset = (user) => {\r\n  return dispatch => {\r\n    api.post('/auth/reset_password', user)\r\n    .then(Response => {\r\n      dispatch({\r\n          type: ACTIONS.FOGOT,\r\n          user: Response.data,\r\n      });\r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Serviço indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    );\r\n  }\r\n}\r\n//LOGOUT\r\nexport const logout = () =>{\r\n  logoutUser();\r\n  history.push(`/login`);\r\n}"]},"metadata":{},"sourceType":"module"}