{"ast":null,"code":"import api from '../services/api';\nimport history from '../services/history';\nimport { showMessage } from './messageReducer';\nconst ACTIONS = {\n  LIST_CALLS: 'LISTCALLS',\n  BY_ID_CALL: 'BYIDCALL',\n  ADD_CALL: 'ADDCALL',\n  UPDATE_CALL: 'UPDATECALL',\n  DELETE_CALL: 'DELETECALL'\n};\nconst INITIAL_STATE = {\n  calls: [],\n  infosCalls: [],\n  callById: []\n};\nexport const callReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ACTIONS.LIST_CALLS:\n      return { ...state,\n        calls: action.calls,\n        infosCalls: action.infosCalls\n      };\n\n    case ACTIONS.ADD_CALL:\n      return { ...state\n      };\n\n    case ACTIONS.BY_ID_CALL:\n      return { ...state,\n        callById: action.callById\n      };\n\n    case ACTIONS.UPDATE_CALL:\n      return state;\n\n    case ACTIONS.DELETE_CALL:\n      const id = action.id;\n      const calls = state.calls.filter(call => call._id !== id);\n      return { ...state,\n        calls: calls\n      };\n\n    default:\n      return state;\n  }\n}; //LISTAR CALLS\n\nexport const listCalls = (page, nOfItems) => {\n  return dispatch => {\n    api.get(`/adm/all-calls?page=${page}&limit=${nOfItems}`).then(Response => {\n      const {\n        docs,\n        infos\n      } = Response.data;\n      dispatch({\n        type: ACTIONS.LIST_CALLS,\n        calls: docs,\n        infosCalls: infos\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; //GET BY ID CALL\n\nexport const getCallById = id => {\n  return dispatch => {\n    api.get(`/adm/call/${id}`).then(Response => {\n      dispatch({\n        type: ACTIONS.BY_ID_CALL,\n        callById: Response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; //UPDATE CALL\n\nexport const updateCall = (company, id, idUser) => {\n  return dispatch => {\n    api.put(`/adm/call/${id}`, company).then(Response => {\n      dispatch({\n        type: ACTIONS.UPDATE_CALL\n      });\n    }, history.push(`/suggest/call/?${idUser}/?${id}?page=1&limit=25`)).catch(error => {\n      console.log(error);\n    });\n  };\n}; //DELETE CALL\n\nexport const destroyCall = id => {\n  return dispatch => {\n    api.delete(`/adm/call/${id}`).then(Response => {\n      dispatch({\n        type: ACTIONS.DELETE_CALL,\n        id: id\n      });\n\n      if (Response.data.msg) {\n        dispatch(showMessage(Response.data.msg));\n      }\n    }).catch(error => {\n      dispatch(showMessage(\"Servidor indisponível, tente mais tarde!\"), console.log(error));\n    });\n  };\n};","map":{"version":3,"sources":["D:/Randel/PROJETO 2020/SuggestInBox/app.suggestinbox.com.br/src/store/callReducer.js"],"names":["api","history","showMessage","ACTIONS","LIST_CALLS","BY_ID_CALL","ADD_CALL","UPDATE_CALL","DELETE_CALL","INITIAL_STATE","calls","infosCalls","callById","callReducer","state","action","type","id","filter","call","_id","listCalls","page","nOfItems","dispatch","get","then","Response","docs","infos","data","catch","error","console","log","getCallById","updateCall","company","idUser","put","push","destroyCall","delete","msg"],"mappings":"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","sourcesContent":["import api from '../services/api';\r\nimport history from '../services/history';\r\nimport { showMessage } from './messageReducer';\r\n\r\nconst ACTIONS = {\r\n  LIST_CALLS: 'LISTCALLS',\r\n  BY_ID_CALL: 'BYIDCALL',\r\n  ADD_CALL: 'ADDCALL',\r\n  UPDATE_CALL: 'UPDATECALL',\r\n  DELETE_CALL: 'DELETECALL',\r\n}\r\nconst INITIAL_STATE = {\r\n  calls: [],\r\n  infosCalls: [],\r\n  callById: [],\r\n}\r\nexport const callReducer = (state = INITIAL_STATE, action) => {\r\n  switch(action.type){\r\n    case ACTIONS.LIST_CALLS:\r\n      return {...state, calls: action.calls, infosCalls: action.infosCalls}\r\n    case ACTIONS.ADD_CALL:\r\n      return {...state}\r\n    case ACTIONS.BY_ID_CALL:\r\n      return {...state, callById: action.callById}\r\n    case ACTIONS.UPDATE_CALL:\r\n      return state;\r\n    case ACTIONS.DELETE_CALL:\r\n      const id = action.id;\r\n      const calls = state.calls.filter( call => call._id !== id);\r\n      return {...state, calls: calls}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n//LISTAR CALLS\r\nexport const listCalls = (page, nOfItems) => {\r\n  return dispatch => {\r\n    api.get(`/adm/all-calls?page=${page}&limit=${nOfItems}`)\r\n    .then(Response => {\r\n      const { docs, infos } = Response.data;\r\n      dispatch({\r\n        type: ACTIONS.LIST_CALLS,\r\n        calls: docs,\r\n        infosCalls: infos,\r\n      })\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n}\r\n//GET BY ID CALL\r\nexport const getCallById = (id) => {\r\n  return dispatch => {\r\n    api.get(`/adm/call/${id}`)\r\n    .then(Response => {\r\n      dispatch({\r\n        type: ACTIONS.BY_ID_CALL,\r\n        callById: Response.data,\r\n      })\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n}\r\n//UPDATE CALL\r\nexport const updateCall = (company, id, idUser) => {\r\n  return dispatch => {\r\n    api.put(`/adm/call/${id}`, company)\r\n    .then(Response => {\r\n      dispatch({\r\n        type: ACTIONS.UPDATE_CALL,\r\n      })\r\n    }, history.push(`/suggest/call/?${idUser}/?${id}?page=1&limit=25`))\r\n    .catch(error => {\r\n      console.log(error)\r\n    })\r\n  }\r\n}\r\n//DELETE CALL\r\nexport const destroyCall = (id) => {\r\n  return dispatch => {\r\n    api.delete(`/adm/call/${id}`)\r\n    .then(Response => {\r\n      dispatch({\r\n        type: ACTIONS.DELETE_CALL,\r\n        id: id\r\n      });\r\n      if(Response.data.msg){\r\n        dispatch(\r\n          showMessage(Response.data.msg)\r\n        )\r\n      }\r\n    })\r\n    .catch(error => {\r\n      dispatch(\r\n        showMessage(\"Servidor indisponível, tente mais tarde!\"),\r\n        console.log(error)\r\n      )}\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}