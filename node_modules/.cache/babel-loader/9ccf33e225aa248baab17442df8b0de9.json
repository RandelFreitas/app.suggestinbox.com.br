{"ast":null,"code":"var _jsxFileName = \"D:\\\\Randel\\\\PROJETO 2020\\\\SuggestInBox\\\\app.suggestinbox.com.br\\\\src\\\\pages\\\\User\\\\SetupUser\\\\index.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport NumberFormat from 'react-number-format';\nimport * as Yup from 'yup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Divider, Button, TextField, Card, Typography, Grid } from '@material-ui/core';\nimport { getUserById, updateUser } from '../../../store/admReducer';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginBottom: 8\n  },\n  button: {\n    float: 'right',\n    margin: 8\n  },\n  media: {\n    margin: 'auto',\n    width: 140,\n    height: 140\n  },\n  card: {\n    marginBottom: 10\n  },\n  center: {\n    margin: 'auto'\n  },\n  error: {\n    color: 'red',\n    fontSize: 12\n  },\n  grid: {\n    justifyContent: 'center',\n    padding: 8\n  }\n}));\n\nconst ZipFormatCustom = props => {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    isNumericString: true,\n    format: \"#####-###\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }));\n};\n\nZipFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nconst CpfFormatCustom = props => {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    isNumericString: true,\n    format: \"###.###.###-##\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }));\n};\n\nCpfFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nconst PhoneFormatCustom = props => {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    isNumericString: true,\n    format: \"(##) #########\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }));\n};\n\nPhoneFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nconst SetupUser = props => {\n  const classes = useStyles();\n  const {\n    userById\n  } = props;\n  const [idUrl] = useState(window.location.href.split('/?')[1]);\n  const defaultFormShape = {\n    email: '',\n    name: '',\n    cpf: '',\n    phone: '',\n    address: {\n      state: '',\n      city: '',\n      street: '',\n      number: '',\n      type: '',\n      district: '',\n      zip: '',\n      obs: ''\n    }\n  };\n  useEffect(() => {\n    props.getUserById(idUrl);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: userById._id ? userById : defaultFormShape,\n    enableReinitialize: true,\n    validationSchema: Yup.object({\n      email: Yup.string().required('Email obrigatório!'),\n      name: Yup.string().required('Nome obrigatório!'),\n      cpf: Yup.string().required('Cpf obrigatório!'),\n      phone: Yup.string().required('Telefone obrigatório!'),\n      address: Yup.object({\n        zip: Yup.string().required('Cep obrigatorio!'),\n        street: Yup.string().required('Rua obrigatorio!'),\n        district: Yup.string().required('Bairro obrigatorio!'),\n        city: Yup.string().required('Cidade obrigatorio!'),\n        state: Yup.string().required('Estado obrigatorio!'),\n        number: Yup.string().required('Número obrigatorio!'),\n        type: Yup.string().required('Número obrigatorio!'),\n        obs: Yup.string().required('Número obrigatorio!')\n      })\n    }),\n    onSubmit: values => {\n      const {\n        name,\n        email,\n        phone,\n        cpf\n      } = values;\n      const {\n        state,\n        city,\n        street,\n        number,\n        type,\n        district,\n        zip,\n        obs\n      } = values.address;\n      const address = {\n        state,\n        city,\n        street,\n        number,\n        type,\n        district,\n        zip,\n        obs\n      };\n      const userUpdate = {\n        name,\n        email,\n        cpf,\n        phone,\n        address\n      };\n      props.updateCompany(userUpdate, userById._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, formik => /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, \"Dados\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    spacing: 1,\n    className: classes.grid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Nome:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"name\",\n    inputProps: {\n      maxLength: 70\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('name'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 21\n    }\n  }, formik.touched.name && formik.errors.name ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 25\n    }\n  }, formik.errors.name) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"CPF:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"cpf\",\n    InputProps: {\n      inputComponent: CpfFormatCustom\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('cpf'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 21\n    }\n  }, formik.touched.cpf && formik.errors.cpf ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 25\n    }\n  }, formik.errors.cpf) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Email:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"email\",\n    inputProps: {\n      maxLength: 70\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('email'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 21\n    }\n  }, formik.touched.email && formik.errors.email ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 25\n    }\n  }, formik.errors.email) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Telefone:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"phone\",\n    InputProps: {\n      inputComponent: PhoneFormatCustom\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('phone'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 21\n    }\n  }, formik.touched.phone && formik.errors.phone ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 25\n    }\n  }, formik.errors.phone) : null))), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      margin: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }\n  }, \"Endere\\xE7o\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    spacing: 1,\n    className: classes.grid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Cep:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"address.zip\",\n    InputProps: {\n      inputComponent: ZipFormatCustom\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('address.zip'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 21\n    }\n  }, formik.touched.address && formik.errors.address ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 25\n    }\n  }, formik.errors.address.zip) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Rua:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"address.street\",\n    inputProps: {\n      maxLength: 70\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('address.street'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 21\n    }\n  }, formik.touched.address && formik.errors.address ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 25\n    }\n  }, formik.errors.address.street) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Bairro:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"address.district\",\n    inputProps: {\n      maxLength: 40\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('address.district'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, formik.touched.address && formik.errors.address ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 25\n    }\n  }, formik.errors.address.district) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Cidade:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"address.city\",\n    inputProps: {\n      maxLength: 70\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('address.city'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 21\n    }\n  }, formik.touched.city && formik.errors.city ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 25\n    }\n  }, formik.errors.address.city) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Estado:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"address.state\",\n    inputProps: {\n      maxLength: 30\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('address.state'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 21\n    }\n  }, formik.touched.state && formik.errors.state ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 25\n    }\n  }, formik.errors.address.state) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"N\\xFAmero:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"address.number\",\n    inputProps: {\n      maxLength: 6\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('address.number'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 21\n    }\n  }, formik.touched.address && formik.errors.address ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 25\n    }\n  }, formik.errors.address.number) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Tipo:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"address.type\",\n    inputProps: {\n      maxLength: 20\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('address.type'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 21\n    }\n  }, formik.touched.address && formik.errors.address ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 25\n    }\n  }, formik.errors.address.type) : null)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    variant: \"outlined\",\n    label: \"Complemento:\",\n    margin: \"dense\",\n    fullWidth: true,\n    name: \"address.obs\",\n    inputProps: {\n      maxLength: 70\n    },\n    InputLabelProps: {\n      shrink: true\n    }\n  }, formik.getFieldProps('address.obs'), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 21\n    }\n  }, formik.touched.address && formik.errors.address ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 25\n    }\n  }, formik.errors.address.obs) : null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    className: classes.button,\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 19\n    }\n  }, \"Atualizar\"), /*#__PURE__*/React.createElement(Button, {\n    className: classes.button,\n    component: Link,\n    to: `/user/?${userById._id}?page=1&limit=25`,\n    variant: \"outlined\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 19\n    }\n  }, \"Cancelar\")))))));\n};\n\nSetupUser.prototypes = {\n  userById: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  userById: state.adm.userById\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  getUserById,\n  updateUser\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupUser);","map":{"version":3,"sources":["D:/Randel/PROJETO 2020/SuggestInBox/app.suggestinbox.com.br/src/pages/User/SetupUser/index.js"],"names":["React","useEffect","useState","connect","Link","bindActionCreators","PropTypes","Formik","NumberFormat","Yup","makeStyles","Divider","Button","TextField","Card","Typography","Grid","getUserById","updateUser","useStyles","theme","root","flexGrow","marginBottom","button","float","margin","media","width","height","card","center","error","color","fontSize","grid","justifyContent","padding","ZipFormatCustom","props","inputRef","onChange","other","values","target","name","value","propTypes","func","isRequired","string","CpfFormatCustom","PhoneFormatCustom","SetupUser","classes","userById","idUrl","window","location","href","split","defaultFormShape","email","cpf","phone","address","state","city","street","number","type","district","zip","obs","_id","object","required","userUpdate","updateCompany","formik","handleSubmit","maxLength","shrink","getFieldProps","touched","errors","inputComponent","prototypes","array","mapStateToProps","adm","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { bindActionCreators } from 'redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport NumberFormat from 'react-number-format';\r\nimport * as Yup from 'yup';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Divider, Button, TextField, Card, Typography, Grid} from '@material-ui/core';\r\nimport { getUserById, updateUser } from '../../../store/admReducer';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: 8\r\n  },\r\n  button: {\r\n    float: 'right',\r\n    margin: 8,\r\n  },\r\n  media: {\r\n    margin: 'auto',\r\n    width: 140,\r\n    height: 140,\r\n  },\r\n  card: {\r\n    marginBottom: 10,\r\n  },\r\n  center: {\r\n    margin: 'auto',\r\n  },\r\n  error: {\r\n    color: 'red',\r\n    fontSize: 12\r\n  },\r\n  grid: {\r\n    justifyContent: 'center',\r\n    padding: 8\r\n  }\r\n}));\r\n\r\nconst ZipFormatCustom = (props) => {\r\n  const { inputRef, onChange, ...other } = props;\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      isNumericString\r\n      format='#####-###'\r\n    />\r\n  );\r\n}\r\n\r\nZipFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst CpfFormatCustom = (props) => {\r\n  const { inputRef, onChange, ...other } = props;\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      isNumericString\r\n      format='###.###.###-##'\r\n    />\r\n  );\r\n}\r\n\r\nCpfFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst PhoneFormatCustom = (props) => {\r\n  const { inputRef, onChange, ...other } = props;\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      isNumericString\r\n      format='(##) #########'\r\n    />\r\n  );\r\n}\r\n\r\nPhoneFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst SetupUser = (props) => {\r\n  const classes = useStyles();\r\n  const { userById } = props;\r\n\r\n  const [idUrl] = useState(window.location.href.split('/?')[1]);\r\n  const defaultFormShape = {\r\n    email: '',\r\n    name: '',\r\n    cpf: '',\r\n    phone: '',\r\n    address: {\r\n      state: '',\r\n      city: '',\r\n      street: '',\r\n      number: '',\r\n      type: '',\r\n      district: '',\r\n      zip: '',\r\n      obs: ''\r\n    },\r\n  };\r\n\r\n  useEffect(()=>{\r\n    props.getUserById(idUrl);\r\n  },[])\r\n\r\n  return (\r\n    <div>\r\n      <Formik \r\n        initialValues= {userById._id? userById : defaultFormShape}\r\n        enableReinitialize\r\n        validationSchema={Yup.object({\r\n          email: Yup.string()\r\n            .required('Email obrigatório!'),\r\n          name: Yup.string()\r\n            .required('Nome obrigatório!'),\r\n          cpf: Yup.string()\r\n            .required('Cpf obrigatório!'),\r\n          phone: Yup.string()\r\n            .required('Telefone obrigatório!'),\r\n          address: Yup.object({\r\n            zip: Yup.string()\r\n              .required('Cep obrigatorio!'),\r\n            street: Yup.string()\r\n              .required('Rua obrigatorio!'),\r\n            district: Yup.string()\r\n              .required('Bairro obrigatorio!'),\r\n            city: Yup.string()\r\n              .required('Cidade obrigatorio!'),\r\n            state: Yup.string()\r\n              .required('Estado obrigatorio!'),\r\n            number: Yup.string()\r\n              .required('Número obrigatorio!'),\r\n            type: Yup.string()\r\n              .required('Número obrigatorio!'),\r\n            obs: Yup.string()\r\n              .required('Número obrigatorio!'),\r\n          }),\r\n        })}\r\n\r\n        onSubmit={(values) => {\r\n          const { name, email, phone, cpf } = values;\r\n          const { state, city, street, number, type, district, zip, obs } = values.address;\r\n          const address = {state, city, street, number, type, district, zip, obs};\r\n          const userUpdate = { name, email, cpf, phone, address };\r\n          props.updateCompany(userUpdate, userById._id);\r\n        }}>\r\n        {formik => (\r\n          <Card >\r\n            <form onSubmit={formik.handleSubmit}>\r\n              <p style={{margin: 10}}>Dados</p>\r\n              <Grid container>\r\n                <Grid container item spacing={1} className={classes.grid}>\r\n                  <Grid item xs={5}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Nome:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"name\"\r\n                      inputProps={{ maxLength: 70 }}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('name')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.name && formik.errors.name ? (\r\n                        <Typography className={classes.error}>{formik.errors.name}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"CPF:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"cpf\"\r\n                      InputProps={{inputComponent: CpfFormatCustom}}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('cpf')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.cpf && formik.errors.cpf ? (\r\n                        <Typography className={classes.error}>{formik.errors.cpf}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={3}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Email:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"email\"\r\n                      inputProps={{ maxLength: 70 }}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('email')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.email && formik.errors.email ? (\r\n                        <Typography className={classes.error}>{formik.errors.email}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Telefone:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"phone\"\r\n                      InputProps={{inputComponent: PhoneFormatCustom}}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('phone')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.phone && formik.errors.phone ? (\r\n                        <Typography className={classes.error}>{formik.errors.phone}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n                <p style={{margin: 10}}>Endereço</p>\r\n                <Grid container item spacing={1} className={classes.grid}>\r\n                  <Grid item xs={2}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Cep:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"address.zip\"\r\n                      InputProps={{inputComponent: ZipFormatCustom}}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('address.zip')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.address && formik.errors.address ? (\r\n                        <Typography className={classes.error}>{formik.errors.address.zip}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Rua:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"address.street\"\r\n                      inputProps={{ maxLength: 70 }}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('address.street')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.address && formik.errors.address ? (\r\n                        <Typography className={classes.error}>{formik.errors.address.street}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={3}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Bairro:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"address.district\"\r\n                      inputProps={{ maxLength: 40 }}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('address.district')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.address && formik.errors.address ? (\r\n                        <Typography className={classes.error}>{formik.errors.address.district}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={3}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Cidade:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"address.city\"\r\n                      inputProps={{ maxLength: 70 }}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('address.city')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.city && formik.errors.city ? (\r\n                        <Typography className={classes.error}>{formik.errors.address.city}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Estado:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"address.state\"\r\n                      inputProps={{ maxLength: 30 }}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('address.state')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.state && formik.errors.state ? (\r\n                        <Typography className={classes.error}>{formik.errors.address.state}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Número:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"address.number\"\r\n                      inputProps={{ maxLength: 6 }}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('address.number')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.address && formik.errors.address ? (\r\n                        <Typography className={classes.error}>{formik.errors.address.number}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Tipo:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"address.type\"\r\n                      inputProps={{ maxLength: 20 }}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('address.type')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.address && formik.errors.address ? (\r\n                        <Typography className={classes.error}>{formik.errors.address.type}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      label=\"Complemento:\"\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      name=\"address.obs\"\r\n                      inputProps={{ maxLength: 70 }}\r\n                      InputLabelProps={{ shrink: true }}\r\n                      {...formik.getFieldProps('address.obs')}\r\n                    />\r\n                    <div>\r\n                      {formik.touched.address && formik.errors.address ? (\r\n                        <Typography className={classes.error}>{formik.errors.address.obs}</Typography>\r\n                      ) : null}\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Divider/>\r\n                  <Button type=\"submit\" className={classes.button} variant=\"contained\" color=\"primary\">\r\n                    Atualizar\r\n                  </Button>\r\n                  <Button className={classes.button} component={Link} to={`/user/?${userById._id}?page=1&limit=25`} variant=\"outlined\" color=\"primary\">\r\n                    Cancelar\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </Card>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nSetupUser.prototypes = {\r\n  userById: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  userById: state.adm.userById,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ getUserById, updateUser }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupUser);"]},"metadata":{},"sourceType":"module"}