{"ast":null,"code":"var _jsxFileName = \"D:\\\\Randel\\\\PROJETO 2020\\\\SuggestInBox\\\\app.suggestinbox.com.br\\\\src\\\\pages\\\\User\\\\Suggest\\\\Call\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { listCalls, destroyCall } from '../../../../store/callReducer';\nimport { atvCompany } from '../../../../store/companyReducer';\nimport { parseISO } from 'date-fns';\nimport { format } from 'date-fns-tz';\nimport Switch from \"@material-ui/core/Switch\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nconst useStyles = makeStyles(() => ({\n  tables: {\n    marginBottom: '25px'\n  },\n  center: {\n    justifyContent: 'center',\n    textAlign: 'center',\n    margin: '20px'\n  },\n  hide: {\n    display: 'none'\n  },\n  buttonAtv: {\n    margin: '15px 0'\n  }\n}));\n\nconst Call = props => {\n  const classes = useStyles();\n  const {\n    companyById,\n    calls\n  } = props;\n  const [call, setCall] = useState({\n    check: companyById.call\n  });\n  useEffect(() => {\n    props.listCalls(1, 25);\n  }, []);\n  useEffect(() => {\n    setCall({\n      check: companyById.call\n    });\n  }, [companyById.call]);\n\n  const atvCall = companyById => {\n    if (companyById.call) {\n      companyById.call = false;\n      setCall({\n        check: companyById.call\n      });\n      return props.atvCompany(companyById);\n    } else {\n      companyById.call = true;\n      setCall({\n        check: companyById.call\n      });\n      return props.atvCompany(companyById);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Chamadas\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.buttonAtv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Switch, {\n      checked: call.check ? call.check : false,\n      onClick: () => atvCall(companyById),\n      name: \"checkedA\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }),\n    label: \"Ativar/Desativar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: classes.tables,\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"Chamados por mesa\"))), /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \"Local\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"Hora\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, calls.map(call => {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      key: call.createdAt,\n      role: \"checkbox\",\n      tabIndex: -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, \"Mesa \", call.table), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, format(parseISO(call.createdAt), 'dd/MM/yyyy HH:mm', {\n      timeZone: 'America/Sao_Paulo'\n    })), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: classes.button,\n      onClick: () => props.destroyCall(call._id),\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 23\n      }\n    }, \"Atendida\")));\n  }))))));\n};\n\nCall.prototypes = {\n  companyById: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  companyById: state.company.companyById,\n  calls: state.call.calls\n});\n\nconst mapsDispatchToProps = dispatch => bindActionCreators({\n  listCalls,\n  atvCompany,\n  destroyCall\n}, dispatch);\n\nexport default connect(mapStateToProps, mapsDispatchToProps)(Call);","map":{"version":3,"sources":["D:/Randel/PROJETO 2020/SuggestInBox/app.suggestinbox.com.br/src/pages/User/Suggest/Call/index.js"],"names":["React","useState","useEffect","PropTypes","bindActionCreators","connect","listCalls","destroyCall","atvCompany","parseISO","format","Switch","FormGroup","FormControlLabel","Typography","Grid","Button","Paper","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","useStyles","tables","marginBottom","center","justifyContent","textAlign","margin","hide","display","buttonAtv","Call","props","classes","companyById","calls","call","setCall","check","atvCall","map","createdAt","table","timeZone","button","_id","prototypes","array","isRequired","mapStateToProps","state","company","mapsDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { listCalls, destroyCall } from '../../../../store/callReducer';\r\nimport { atvCompany } from '../../../../store/companyReducer';\r\nimport { parseISO } from 'date-fns';\r\nimport { format } from 'date-fns-tz';\r\n\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst useStyles = makeStyles(() =>({\r\n  tables: {\r\n    marginBottom: '25px',\r\n  },\r\n  center: {\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    margin: '20px'\r\n  },\r\n  hide: {\r\n    display: 'none'\r\n  },\r\n  buttonAtv: {\r\n    margin: '15px 0'\r\n  }\r\n}));\r\n\r\nconst Call = (props) => {\r\n  const classes = useStyles();\r\n  const { companyById, calls } = props;\r\n\r\n  const [ call, setCall ] = useState({\r\n    check: companyById.call\r\n  });\r\n\r\n  useEffect(() => {\r\n    props.listCalls(1, 25)\r\n  },[]);\r\n\r\n  useEffect(() => {\r\n    setCall({check: companyById.call});\r\n  },[companyById.call])\r\n\r\n  const atvCall = (companyById) => {\r\n    if(companyById.call){\r\n      companyById.call = false;\r\n      setCall({check: companyById.call});\r\n      return props.atvCompany(companyById);\r\n    }else{\r\n      companyById.call = true;\r\n      setCall({check: companyById.call});\r\n      return props.atvCompany(companyById);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <Typography variant=\"h5\" component=\"h2\">Chamadas</Typography>\r\n      <Grid container>\r\n        <Grid item className={classes.buttonAtv}>\r\n          <FormGroup row>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={call.check? call.check : false}\r\n                onClick={()=>atvCall(companyById)}\r\n                name=\"checkedA\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Ativar/Desativar\"\r\n          />\r\n          </FormGroup>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container>\r\n        <Grid className={classes.tables} item>\r\n          <Typography variant=\"h6\">Chamados por mesa</Typography>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Paper>\r\n        <TableContainer>\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align='center'>Local</TableCell>\r\n                <TableCell align='center'>Hora</TableCell>\r\n                <TableCell align='center'></TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              { calls.map( call => {\r\n                return (\r\n                  <TableRow hover key={call.createdAt} role=\"checkbox\" tabIndex={-1}>\r\n                    <TableCell align='center'>Mesa {call.table}</TableCell>\r\n                    <TableCell align='center'>{format(parseISO(call.createdAt), 'dd/MM/yyyy HH:mm', {timeZone: 'America/Sao_Paulo'} )}</TableCell>\r\n                    <TableCell align='center'>\r\n                      <Button className={classes.button} onClick={()=>props.destroyCall(call._id)} variant=\"contained\" color=\"primary\">\r\n                        Atendida\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nCall.prototypes = {\r\n  companyById: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  companyById: state.company.companyById,\r\n  calls: state.call.calls,\r\n});\r\n\r\nconst mapsDispatchToProps = dispatch => \r\n  bindActionCreators({listCalls, atvCompany, destroyCall}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapsDispatchToProps)(Call);"]},"metadata":{},"sourceType":"module"}