{"ast":null,"code":"var _jsxFileName = \"D:\\\\Randel\\\\PROJETO 2020\\\\SuggestInBox\\\\app.suggestinbox.com.br\\\\src\\\\pages\\\\User\\\\Suggest\\\\Menu\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { atvCompany, getCompanyById } from '../../../../store/companyReducer';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Switch from \"@material-ui/core/Switch\";\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { DragDropContext } from 'react-beautiful-dnd';\nconst useStyles = makeStyles(() => ({\n  button: {\n    marginTop: '25px'\n  },\n  formControl: {\n    padding: '15px 0'\n  },\n  buttonAtv: {\n    margin: '15px 0'\n  }\n}));\n\nconst Menu = props => {\n  const classes = useStyles();\n  const {\n    companyById\n  } = props;\n  const [menu, setMenu] = useState({\n    check: companyById.menu\n  });\n  useEffect(() => {\n    setMenu({\n      check: companyById.menu\n    });\n  }, [companyById.menu]);\n\n  const atvMenu = companyById => {\n    if (companyById.menu) {\n      companyById.menu = false;\n      setMenu({\n        check: companyById.menu\n      });\n      return props.atvCompany(companyById);\n    } else {\n      companyById.menu = true;\n      setMenu({\n        check: companyById.menu\n      });\n      return props.atvCompany(companyById);\n    }\n  };\n\n  const [menuType, setMenuType] = useState(1);\n\n  const handleChange = event => {\n    setMenuType(event.target.value);\n  };\n\n  const initialData = [{\n    tasks: {\n      'task-1': {\n        id: 'task-1',\n        content: 'Take out the garbage'\n      },\n      'task-2': {\n        id: 'task-2',\n        content: 'Watch my favorite show'\n      },\n      'task-3': {\n        id: 'task-3',\n        content: 'Charge my phone'\n      },\n      'task-4': {\n        id: 'task-4',\n        content: 'Cook dinner'\n      }\n    },\n    columns: {\n      'column-1': {\n        id: 'column-1',\n        title: 'To do',\n        taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\n      }\n    },\n    columnOrder: ['column-1']\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"Card\\xE1pio / Cat\\xE1logo\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.buttonAtv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Switch, {\n      checked: menu.check ? menu.check : false,\n      onClick: () => atvMenu(companyById),\n      name: \"checkedA\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }),\n    label: \"Ativar/Desativar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  })))), /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Tipo:\"), /*#__PURE__*/React.createElement(Select, {\n    value: menuType,\n    onChange: handleChange,\n    displayEmpty: true,\n    className: classes.selectEmpty,\n    inputProps: {\n      'aria-label': 'Without label'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"Card\\xE1pio\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Cat\\xE1logo\"))), initialData.map(columnId => {\n    //const column = initialData.columns[columnId];\n    //const tasks = column.taskIds.map(taskId => initialData.tasks[taskId]);\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 16\n      }\n    }, \"sdf\");\n  }));\n};\n\nMenu.prototypes = {\n  companyById: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  companyById: state.company.companyById\n});\n\nconst mapsDispatchToProps = dispatch => bindActionCreators({\n  atvCompany,\n  getCompanyById\n}, dispatch);\n\nexport default connect(mapStateToProps, mapsDispatchToProps)(Menu);","map":{"version":3,"sources":["D:/Randel/PROJETO 2020/SuggestInBox/app.suggestinbox.com.br/src/pages/User/Suggest/Menu/index.js"],"names":["React","useState","useEffect","PropTypes","bindActionCreators","connect","atvCompany","getCompanyById","makeStyles","Switch","FormGroup","FormControlLabel","Typography","Grid","MenuItem","FormHelperText","FormControl","Select","DragDropContext","useStyles","button","marginTop","formControl","padding","buttonAtv","margin","Menu","props","classes","companyById","menu","setMenu","check","atvMenu","menuType","setMenuType","handleChange","event","target","value","initialData","tasks","id","content","columns","title","taskIds","columnOrder","selectEmpty","map","columnId","prototypes","array","isRequired","mapStateToProps","state","company","mapsDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { atvCompany, getCompanyById } from '../../../../store/companyReducer';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\n\r\nconst useStyles = makeStyles(() =>({\r\n  button: {\r\n    marginTop: '25px',\r\n  },\r\n  formControl: {\r\n    padding: '15px 0'\r\n  },\r\n  buttonAtv: {\r\n    margin: '15px 0'\r\n  }\r\n}));\r\n\r\nconst Menu = (props) => {\r\n  const classes = useStyles();\r\n  const { companyById } = props;\r\n  const [ menu, setMenu ] = useState({\r\n    check: companyById.menu\r\n  });\r\n\r\n  useEffect(() => {\r\n    setMenu({check: companyById.menu});\r\n  },[companyById.menu])\r\n\r\n  const atvMenu = (companyById) => {\r\n    if(companyById.menu){\r\n      companyById.menu = false;\r\n      setMenu({check: companyById.menu});\r\n      return props.atvCompany(companyById);\r\n    }else{\r\n      companyById.menu = true;\r\n      setMenu({check: companyById.menu});\r\n      return props.atvCompany(companyById);\r\n    }\r\n  }\r\n\r\n  const [menuType, setMenuType] = useState(1);\r\n\r\n  const handleChange = (event) => {\r\n    setMenuType(event.target.value);\r\n  };\r\n\r\n  const initialData = [{\r\n    tasks: {\r\n      'task-1' : { id: 'task-1', content: 'Take out the garbage'},\r\n      'task-2' : { id: 'task-2', content: 'Watch my favorite show'},\r\n      'task-3' : { id: 'task-3', content: 'Charge my phone'},\r\n      'task-4' : { id: 'task-4', content: 'Cook dinner'},\r\n    },\r\n    columns: {\r\n      'column-1' : {\r\n        id: 'column-1',\r\n        title: 'To do',\r\n        taskIds: ['task-1', 'task-2','task-3','task-4']\r\n      },\r\n    },\r\n    columnOrder: ['column-1'],\r\n  }];\r\n\r\n  return(\r\n    <div>\r\n      <Typography variant=\"h5\" component=\"h2\">Cardápio / Catálogo</Typography>\r\n      <Grid container>\r\n        <Grid item className={classes.buttonAtv}>\r\n          <FormGroup row>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={menu.check? menu.check : false}\r\n                onClick={()=>atvMenu(companyById)}\r\n                name=\"checkedA\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Ativar/Desativar\"\r\n          />\r\n          </FormGroup>\r\n        </Grid>\r\n      </Grid>\r\n      <FormControl className={classes.formControl}>\r\n        <FormHelperText>Tipo:</FormHelperText>\r\n        <Select\r\n          value={menuType}\r\n          onChange={handleChange}\r\n          displayEmpty\r\n          className={classes.selectEmpty}\r\n          inputProps={{ 'aria-label': 'Without label' }}\r\n        >\r\n          <MenuItem value={1}>Cardápio</MenuItem>\r\n          <MenuItem value={2}>Catálogo</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      { initialData.map((columnId) => {\r\n        //const column = initialData.columns[columnId];\r\n        //const tasks = column.taskIds.map(taskId => initialData.tasks[taskId]);\r\n\r\n        return <h1>sdf</h1>\r\n      })}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nMenu.prototypes = {\r\n  companyById: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  companyById: state.company.companyById,\r\n});\r\n\r\nconst mapsDispatchToProps = dispatch => \r\n  bindActionCreators({atvCompany, getCompanyById}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapsDispatchToProps)(Menu);"]},"metadata":{},"sourceType":"module"}